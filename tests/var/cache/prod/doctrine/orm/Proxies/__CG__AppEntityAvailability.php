<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Availability extends \App\Entity\Availability implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'parking', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'provider', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'from', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'to', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'date', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'is_deleted', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'debut', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'fin', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'affiche'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'parking', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'provider', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'from', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'to', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'date', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'is_deleted', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'debut', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'fin', '' . "\0" . 'App\\Entity\\Availability' . "\0" . 'affiche'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Availability $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getParking(): ?\App\Entity\Parkings
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParking', []);

        return parent::getParking();
    }

    /**
     * {@inheritDoc}
     */
    public function setParking(?\App\Entity\Parkings $parking): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParking', [$parking]);

        return parent::setParking($parking);
    }

    /**
     * {@inheritDoc}
     */
    public function getProvider(): ?\App\Entity\Provider
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProvider', []);

        return parent::getProvider();
    }

    /**
     * {@inheritDoc}
     */
    public function setProvider(?\App\Entity\Provider $provider): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProvider', [$provider]);

        return parent::setProvider($provider);
    }

    /**
     * {@inheritDoc}
     */
    public function getDebut(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDebut', []);

        return parent::getDebut();
    }

    /**
     * {@inheritDoc}
     */
    public function setDebut(string $debut): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDebut', [$debut]);

        return parent::setDebut($debut);
    }

    /**
     * {@inheritDoc}
     */
    public function getFin(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFin', []);

        return parent::getFin();
    }

    /**
     * {@inheritDoc}
     */
    public function setFin(string $fin): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFin', [$fin]);

        return parent::setFin($fin);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate(\DateTimeInterface $date): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDeleted(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDeleted', []);

        return parent::getIsDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDeleted(?bool $is_deleted): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDeleted', [$is_deleted]);

        return parent::setIsDeleted($is_deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getFrom(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrom', []);

        return parent::getFrom();
    }

    /**
     * {@inheritDoc}
     */
    public function setFrom(\DateTimeInterface $from): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrom', [$from]);

        return parent::setFrom($from);
    }

    /**
     * {@inheritDoc}
     */
    public function getTo(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTo', []);

        return parent::getTo();
    }

    /**
     * {@inheritDoc}
     */
    public function setTo(\DateTimeInterface $to): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTo', [$to]);

        return parent::setTo($to);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffiche(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffiche', []);

        return parent::getAffiche();
    }

    /**
     * {@inheritDoc}
     */
    public function setAffiche(?bool $affiche): \App\Entity\Availability
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAffiche', [$affiche]);

        return parent::setAffiche($affiche);
    }

}
